"use client";

import Nav from "@/components/common/Nav";
import QuillCodeRenderer from "@/components/common/QuillCodeRenderer";
import { type Post } from "@/data";

const newHtml =
  '<p>자바스크립트 애플리케이션에서는 사요자가 자바스크립트 애플리케이션에서는 사요자가</p><p>자바스크립트 애플리케이 션에서는 사요자가</p><p><br></p><p>자바스 크립트 애플리 케이션에서는 사요자가 션에서는 사요</p><p><br></p><p>자바스크립트 애플리케이 션에서는 사요자가자바스크립트 애플리 케이션에서는 사요자가자바 스크립트 애플리케이션에서는 사요자가</p><p>자바스크립트 애플리케이션에서는 사요자가자바스</p><p>자바스크립트 애플리케이션에서는 사요자가자바스자바스크립트 애플리케이션에서는</p><p><br></p><h1>| 디바운스</h1><p><br></p><p>자바스크립트 애플리케이션에서는 사요자가자바스</p><p>자바스크립트 애플리케이 션에서는 사요자가자바스크립트 애플리</p><p>자바스크립트 애플리케이션에</p><p><br></p><h2>디바운스의 동작</h2><p><br></p><p> 케이션에서는 사요자가자바 스크립트 애플리케이션에서는 사요자가</p><p><br></p><ol><li data-list="ordered"><span class="ql-ui" contenteditable="false"></span> <strong>케이션에서는 </strong>사요자가자바 스크립트 애플리케이션에서는 사요자가</li><li data-list="ordered"><span class="ql-ui" contenteditable="false"></span> <strong>케이션에서는 </strong>사요자가자바 스크립트 애플리케이션에서는 </li><li data-list="ordered"><span class="ql-ui" contenteditable="false"></span> <strong>케이션에서는 </strong>사요자가자바 스크립트 애플리케이션에서는 사요자가</li></ol><p><br></p><h2>사용</h2><p><br></p><p>자바스크립트 애플리케이션에서는 사요자가자바스</p><p>자바스크립트 애플리케이 션에서는 사요자가자바스크립트 애플리</p><p>자바스크립트 애플리케이션에</p><p><br></p><p> 케이션에서는 사요자가자바 스크립트 애플리케이션에서는 사요자가</p><p><br></p><div class="ql-code-block-container" spellcheck="false"><select class="ql-ui" contenteditable="false"><option value="plain">Plain</option><option value="javascript">JavaScript</option><option value="typescript">TypeScript</option><option value="jsx">JSX</option><option value="tsx">TSX</option><option value="rust">Rust</option><option value="bash">Bash</option><option value="cpp">C++</option><option value="cs">C#</option><option value="css">CSS</option><option value="xml">HTML/XML</option></select><div class="ql-code-block" data-language="javascript">const debounce = (cb, delay) =&gt; {</div><div class="ql-code-block" data-language="javascript">  let timer;</div><div class="ql-code-block" data-language="javascript">  </div><div class="ql-code-block" data-language="javascript">  // timer를 가지고 있는 클로저를 반환합니다.</div><div class="ql-code-block" data-language="javascript">  return e =&gt; {</div><div class="ql-code-block" data-language="javascript">    // delay가 경과하기 이전에 이벤트가 발생하면를 재설정합니다.</div><div class="ql-code-block" data-language="javascript">    // 따라서 delay보다 짧은 간격으로 이벤트가 발생하면 콜백 함수는 호출되지 않습니다.</div><div class="ql-code-block" data-language="javascript">    if(timer) clearTimeout(timer);</div><div class="ql-code-block" data-language="javascript">    timer = setTimeout(cb, delay, e);</div><div class="ql-code-block" data-language="javascript">  }</div><div class="ql-code-block" data-language="javascript">}</div></div><p><br></p><p> 케이션에서는 사요자가자바 스크립트 애플리케이션</p><p><br></p><div class="ql-code-block-container" spellcheck="false"><select class="ql-ui" contenteditable="false"><option value="plain">Plain</option><option value="javascript">JavaScript</option><option value="typescript">TypeScript</option><option value="jsx">JSX</option><option value="tsx">TSX</option><option value="rust">Rust</option><option value="bash">Bash</option><option value="cpp">C++</option><option value="cs">C#</option><option value="css">CSS</option><option value="xml">HTML/XML</option></select><div class="ql-code-block" data-language="xml">&lt;input type="text" id="search" placeholder="검색어를 입력하세요"&gt;</div></div><p><br></p><p> 케이션에서는 사요자가자바 스크립트 애플리케이션</p><p><br></p><div class="ql-code-block-container" spellcheck="false"><select class="ql-ui" contenteditable="false"><option value="plain">Plain</option><option value="javascript">JavaScript</option><option value="typescript">TypeScript</option><option value="jsx">JSX</option><option value="tsx">TSX</option><option value="rust">Rust</option><option value="bash">Bash</option><option value="cpp">C++</option><option value="cs">C#</option><option value="css">CSS</option><option value="xml">HTML/XML</option></select><div class="ql-code-block" data-language="javascript">const searchInput = document.getElementById("search");</div><div class="ql-code-block" data-language="javascript"><br></div><div class="ql-code-block" data-language="javascript">const handleInput = debounce((e) =&gt; {</div><div class="ql-code-block" data-language="javascript">  const query = e.target.value;</div><div class="ql-code-block" data-language="javascript">  console.log(`검색어: ${query}`);</div><div class="ql-code-block" data-language="javascript">}, 200);</div><div class="ql-code-block" data-language="javascript"><br></div><div class="ql-code-block" data-language="javascript">searchInput.addEventListener("input", handleInput);</div></div><p><br></p><p> 케이션에서는 사요자가자바 스크립트 애플리케이션   케이션에서는 사요자가자바 스크립트 애플리케이션</p><p> 케이션에서는 사요자가자바 스크립트 애플리케이션</p><p><br></p><div class="ql-code-block-container" spellcheck="false"><select class="ql-ui" contenteditable="false"><option value="plain">Plain</option><option value="javascript">JavaScript</option><option value="typescript">TypeScript</option><option value="jsx">JSX</option><option value="tsx">TSX</option><option value="rust">Rust</option><option value="bash">Bash</option><option value="cpp">C++</option><option value="cs">C#</option><option value="css">CSS</option><option value="xml">HTML/XML</option></select><div class="ql-code-block" data-language="rust">use std::collections::HashMap;</div><div class="ql-code-block" data-language="rust"><br></div><div class="ql-code-block" data-language="rust">fn main() {</div><div class="ql-code-block" data-language="rust">    let mut stock = HashMap::new();</div><div class="ql-code-block" data-language="rust"><br></div><div class="ql-code-block" data-language="rust">    stock.insert("Chair", 5);</div><div class="ql-code-block" data-language="rust">    stock.insert("Bed", 3);</div><div class="ql-code-block" data-language="rust">    stock.insert("Table", 2);</div><div class="ql-code-block" data-language="rust">    stock.insert("Couch", 0);</div><div class="ql-code-block" data-language="rust"><br></div><div class="ql-code-block" data-language="rust">    let mut total_stock = 0;</div><div class="ql-code-block" data-language="rust">    for (item, qty) in stock.iter() {</div><div class="ql-code-block" data-language="rust">        total_stock = total_stock + qty;</div><div class="ql-code-block" data-language="rust"><br></div><div class="ql-code-block" data-language="rust">        let stock_count = if *qty == 0 {</div><div class="ql-code-block" data-language="rust">            "out of stock".to_owned()</div><div class="ql-code-block" data-language="rust">        } else {</div><div class="ql-code-block" data-language="rust">            format!("{:?}", qty)</div><div class="ql-code-block" data-language="rust">        };</div><div class="ql-code-block" data-language="rust"><br></div><div class="ql-code-block" data-language="rust">        println!("item = {:?}, stock = {:?}", item, stock_count);</div><div class="ql-code-block" data-language="rust">    }</div><div class="ql-code-block" data-language="rust"><br></div><div class="ql-code-block" data-language="rust">    println!("total stock: {:?}", total_stock)</div><div class="ql-code-block" data-language="rust">}</div></div><p><br></p>';

export default function PostClient({ post }: { post: Post }) {
  return (
    <div className="relative h-dvh overflow-auto">
      <Nav className="bg-black/40" />
      <div className="absolute top-0 left-0 w-full h-96">
        <img
          src={post.thumbnail}
          alt="post thumbnail"
          className="w-full h-full object-cover"
        />
      </div>
      <div className="blog-post absolute top-96 left-1/2 -translate-x-1/2 w-full max-w-[820px] p-6">
        <h1 className="text-4xl">{post.title}</h1>
        <div className="flex items-center gap-3">
          <p className="shrink-0 text-sm flex gap-2 text-indigo-200">
            {post.tags.join(", ")}
          </p>
          <p className="text-gray-400 text-xs">{post.createdAt}</p>
        </div>
        <div className="p-2 mt-8">
          <QuillCodeRenderer htmlString={newHtml} />
        </div>
      </div>
    </div>
  );
}
