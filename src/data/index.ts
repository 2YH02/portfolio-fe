export type Members = {
  pm?: number;
  ui?: number;
  fe?: number;
  be?: number;
};

export type Section = {
  title: string;
  bullets: string[];
};

export interface Project {
  id: number;
  title: string;
  thumbnail: string;
  members?: Members;
  role: string;
  repository: string;
  deployUrl?: string;
  techStack: string[];
  description: string;
  period?: string;
  sections?: Section[];
  images: string[];
  reflection: string;
}

export const projects: Project[] = [
  {
    id: 0,
    title: "대한민국 철봉 지도",
    thumbnail: "/pullup.png",
    members: {
      fe: 1,
      be: 1,
    },
    role: "프론트엔드",
    repository: "https://github.com/2YH02/k-pullup",
    deployUrl: "https://www.k-pullup.com",
    techStack: [
      "Next.js",
      "Typescript",
      "Zustand",
      "TanStackQuery",
      "TailwindCSS",
      "Storybook",
    ],
    images: [
      "/pullup-1.png",
      "/pullup-2.png",
      "/pullup-3.png",
      "/pullup-4.png",
    ],
    description:
      "사용자가 지도에서 원하는 위치를 검색하여 주변의 철봉 위치를 확인할 수 있고, 발견한 철봉을 지도에 등록하는 기능을 제공합니다. 사용자는 등록된 철봉의 상세 정보, 사진, 거리뷰를 조회할 수 있으며, 즐겨찾기 기능을 통해 특정 위치를 저장하고 관리할 수 있습니다. 또한, 각 철봉 위치에 대한 댓글을 작성, 위치 공유를 통해 다른 사용자와 정보를 공유할 수 있습니다.",
    sections: [
      {
        title: "카카오 지도 클러스터러 직접 구현 및 성능 최적화",
        bullets: [
          `서버에서 5,000개 이상의 위치 데이터를 받아 카카오 지도 API를 통해 마커를 표시했을 때, 클러스터
러 적용 시 지도를 이동하거나 확대/축소할 때마다 CPU 점유율이 100%를 넘기며 화면이 일시적으로
멈추는 문제가 발생했습니다. 이를 개선하기 위해 지도의 중심을 기준으로 특정 범위 내의 마커만 연산
·표시하도록 처리하고, Grid-Based 클러스터링 알고리즘을 사용해 클러스터러를 직접 구현하여 카카
오 지도 API의 클러스터러를 대체했습니다. 그 결과 CPU 점유율이 최대 30% 수준으로 안정화되었고,
사용자 경험도 크게 향상되었습니다.`,
        ],
      },
      {
        title: "기존 React에서 Next.js로 변경 및 SEO 최적화",
        bullets: [
          `SSR을 통해 초기 로딩시간을 줄이고 SEO를 개선하고자 기존 React로 만들어진 프로젝트를 Next.js
로 변경하였습니다. 이 때문에 구글 평균 게재 순위가 6등에서 1등으로 증가하고, 총 클릭 수가 대략
80%, 총 노출 수가 기존 대비 대략 100% 증가하였습니다.`,
        ],
      },
      {
        title: "초기 로딩 시간 단축",
        bullets: [
          `첫 화면에 로드되는 다수의 컨텐츠로 사용자가 서비스에 접근할 때 느끼는 초기 로딩 시간이 길어지는
문제를 인식했습니다. 이를 해결하기 위해 React의 lazy 로딩 기능과 코드 스플리팅 기술을 적용하여,
스크립트 실행 시간을 기존 993밀리 초에서 828밀리 초로 17% 단축했으며, 전체 페이지 로딩 시간도
6,343밀리 초에서 5,776밀리 초로 약 9% 개선하였습니다. 또한, 이후에 Next.js로 변경해 SSR을 적
용하면서 첫 페이지 로딩 시간을 5,776밀리 초에서 2,330밀리 초로 약 60% 개선하였습니다.`,
        ],
      },
      {
        title: "모바일 사용성 확장",
        bullets: [
          `Google Analytics 분석 결과, 웹보다 모바일에서 사용하는 사용자가 약 70% 더 많은 것으로 나타났
습니다. 이에 모바일 사용성을 높이기 위해 PWA를 도입하고, User Agent를 활용해 접속 브라우저를
식별한 뒤 PWA 설치를 유도하는 안내 창을 노출하도록 구현했습니다. 이후 프로젝트를 Next.js로 전
환하면서 기존 PWA는 제거하고, React Native Expo 기반의 WebView 앱을 도입하였습니다.`,
        ],
      },
      {
        title: "이미지 용량 감소를 위한 접근",
        bullets: [
          `서비스에 거리뷰를 기능을 도입하면서 기존 제공정보로 제공하던 이미지의 해상도의 중요도가 낮아졌
다고 팀끼리 판단하였습니다. 따라서 이미지 해상도의 감소는 감안하고 서비스의 로딩 속도와 사용자
경험을 위해 이미지 용량을 줄이는 전략을 채택했습니다. JavaScript의 Canvas API를 활용하여 사용
자가 업로드하는 이미지의 크기를 실시간으로 80% 줄이는 기능을 구현했습니다. 이 과정은 서버로의
데이터 전송 시간을 단축하며, 페이지 로딩 속도를 개선하는 데 기여했습니다.`,
        ],
      },
      {
        title: "라이브러리 개발 경험",
        bullets: [
          "`img-toolkit` 라이브러리 개발·배포 (Canvas API 기반 실시간 이미지 압축)",
          "`radiciui` Tailwind 기반 React 컴포넌트 라이브러리 제작 → UI 일관성 및 개발 효율성 향상",
        ],
      },
    ],
    reflection: `프로젝트를 실제로 배포하고 운영하면서, 사용자로부터 받은 피드백을 통해 제공하는 서비스의 사용자 경험(UX)에 많은 부분을 개선해야 할 필요성을 실감했습니다. 사용자들은 종종 저에게 예상치 못한 사소한 부분에서조차 불편함을 느끼고 있었습니다. 이는 저의 개발 과정이 주로 제 자신의 관점에만 초점을 맞추었음을 반영합니다. 이에 따라 사용자 경험을 세심하게 고려하고 개선하기 위한 노력을 기울였습니다. 비록 아직 부족한 부분이 많지만, 사용자 경험을 지속적으로 공부하고 발전시켜 나가는 프론트엔드 개발자가 되겠다는 각오를 다졌습니다.

또한, 실제 서비스 중인 사이트에서 다양한 오류가 발생하면서, 지속해서 메인 브랜치를 수정하고 다시 배포하는 과정을 반복했습니다. 특히 이미지 업로드, 회원가입 과정에서의 오류가 예상치 못하게 지속해서 발생하였습니다. 저는 이 과정에서 배포 이전에 개발 환경에서 문제점을 발견하고 미리 깨뜨려 보면서 해결하는것의 중요성을 깨닫게 되었습니다. 따라서 저는 테스트 코드의 도입을 결정했고, 배포 전 필수 로직에 대한 검증을 통해 사이트의 안정성을 높이기 시작했습니다. 테스트 코드에 대한 이해와 활용은 아직 초보 단계이지만, 이를 계속해서 학습하고 적용함으로써 사이트를 더욱 견고하게 만들고자 합니다.

이번 프로젝트는 저에게 정말 의미 있는 프로젝트입니다. 사용자는 많지 않지만 개발자로서 어떤 기능을 제공하고, 어떤 노력을 해야 사용자에게 만족감을 주는지, 기존 비슷한 서비스와 비교하여 어떤 부분을 장점으로 가져갈지, 어떤 식으로 코드를 작성하고 프로젝트를 만들어야 검색엔진에서 다른 사이트들보다 우선순위가 높아질지, 이런 고민들은 저를 제가 꿈꾸고 이상적으로 생각하는 개발자로 성장하기 위한 작지만, 매우 의미 있는 한걸음이었습니다. 볼수록 개선해야 될 것들이 눈에 보이고, 불편한 점들도 많이 남아있습니다. 저는 계속해서 해당 프로젝트를 조금씩 바꿔 나가려 합니다.`,
  },
  {
    id: 1,
    title: "Let's",
    thumbnail: "/lets.png",
    period: "2023.12.26 ~ 2024.01.29 (약 5주)",
    members: {
      fe: 5,
      be: 4,
      ui: 1,
      pm: 2,
    },
    role: "프론트엔드",
    repository: "https://github.com/WinnerOne-LETS/LETS_FE",
    techStack: [
      "Next.js",
      "Typescript",
      "Zustand",
      "TanStackQuery",
      "TailwindCSS",
      "MSW",
    ],
    images: [
      "/lets-1.png",
      "/lets-2.png",
      "/lets-3.png",
      "/lets-4.png",
      "/lets-5.png",
      "/lets-6.png",
    ],
    description:
      "사용자가 테마 및 해시태그 키워드를 활용하여 패키지 여행 상품을 검색하고, 여행 상품의 일정, 가격, 장소 등 상세 정보를 쉽게 확인할 수 있게 하며, 유사한 키워드를 가진 다른 여행 상품과의 직접 비교 기능을 제공하여 사용자가 자신의 여행 목적과 선호도에 가장 잘 맞는 패키지를 효율적으로 선택할 수 있도록 하는 서비스 입니다.",
    sections: [
      {
        title: "사용자 반응성 향상 및 로딩 시간 체감 단축",
        bullets: [
          `페이지 로드 시간이 길어 사용자가 클릭이 제대로 되었는지 확신할 수 없는 문제를 해결하기 위해,
Zustand 라이브러리를 활용한 전역 상태 관리를 도입했습니다. 사용자가 아이템을 클릭하는 순간
을 전역 상태로 관리하여, 페이지 데이터 로딩 동안 즉각적으로 스켈레톤 UI를 표시함으로써 사용자
경험을 개선했습니다.`,
        ],
      },
      {
        title: "상태 유지를 통한 사용자 경험 향상",
        bullets: [
          `Zustand의 persist 플러그인을 활용하여 무한 스크롤로 구현된 아이템 리스트에서 사용자의 스크
롤 위치를 저장하고 관리했습니다. 이를 통해 사용자가 아이템 상세 페이지를 방문한 후 이전 페이지
로 돌아올 때 이전에 보았던 위치로 자동으로 스크롤이 복원되도록 구현하여, 사용자가 정보를 찾는
데 있어 연속성과 편리성을 개선했습니다.`,
        ],
      },
      {
        title: "사용자 이동 경로의 개선",
        bullets: [
          `로그인과 회원가입 프로세스를 개선하기 위해, 사용자가 로그인 또는 회원가입 페이지에 접근하는
시점의 URL을 저장했습니다. 이후 사용자가 로그인이나 회원가입을 완료하면 자동으로 이전에 머물
렀던 페이지로 리다이렉트 되도록 구현함으로써, 사용자의 흐름을 자연스럽게 유지시켜 주었습니다.`,
        ],
      },
      {
        title: "서버 사이드 렌더링 성능 향상",
        bullets: [
          `React Query의 prefetch 기능을 활용하여 서버 사이드 렌더링(SSR)을 개선했습니다. 이는 페이지
데이터를 사전에 불러와 초기 로딩 시간을 줄이고, 결과적으로 서비스의 성능을 향상시키는 데 기여
했습니다. 이러한 기술적 접근을 통해 사용자에게 더 빠르고 부드러운 페이지 전환 경험을 제공하며,
웹 애플리케이션의 전반적인 반응성을 개선했습니다.`,
        ],
      },
    ],
    reflection: `이번 프로젝트에서 SSR을 통한 SEO 최적화를 목표로, 모든 팀원이 처음 접하는 Next.js 프레임워크를 채택하여 진행했습니다. 이 결정은 프로젝트 기간이 짧음에도, 초기 학습 곡선의 어려움을 극복하며 팀 전체의 Next.js에 대한 깊은 이해를 이끌어냈습니다. 이 과정은 단순히 새로운 기술 스택을 익히는 것 이상의 가치를 창출했으며, 팀원 각자에게 Next.js를 활용한 프로젝트 구현에 대한 중요한 경험을 제공했습니다.

프로젝트를 진행하며, 협업 규칙과 코딩 컨벤션에서 엄격함보다는 유연성을 선택했습니다. 이는 팀원들의 다양한 성향과 프로젝트의 일정을 고려한 결정이었습니다. 결과적으로, 이러한 접근은 프로젝트의 완성도를 높이는 데 크게 기여했으며, 팀 간의 원활한 협력과 커뮤니케이션을 촉진시켰습니다. 이를 통해, 프로젝트 목표 달성을 위한 팀워크의 중요성과 유연한 작업 환경 구축의 가치를 다시 한번 확인할 수 있었습니다.

또한, 이번 프로젝트는 디자이너, PM 과 함께 다양한 역할의 전문가들과의 첫 협업 기회였습니다. 이 과정에서 개발자로서 단순히 코드 작성에만 집중하는 것이 아니라, 디자인과 기획 단계에 적극 참여하고 의견을 나누며 프로젝트의 방향성에 기여하는 것의 중요성을 깨달았습니다. 이는 프로젝트가 보다 통합적이고 조화로운 방향으로 전진하는 데 필수적이며, 최종 제품의 품질과 사용자 경험을 향상시키는 데 중요한 역할을 한다는 것을 이해하였습니다.`,
  },
  {
    id: 2,
    title: "Hey 놀자",
    thumbnail: "/heynolja.png",
    period: "2023.11.20 ~ 2023.11.30 (약 2주)",
    members: {
      fe: 1,
      be: 1,
    },
    role: "프론트엔드",
    repository: "https://github.com/Yanolza-Miniproject/Heynolja_FE",
    techStack: [
      "React",
      "Typescript",
      "Vite.js",
      "TanStackQuery",
      "Recoil",
      "Jest",
      "MSW",
    ],
    images: ["/hey-1.png", "/hey-2.png", "/hey-3.png"],
    description:
      "사용자가 지역, 숙소 유형 (호텔, 펜션, 한옥 등), 그리고 추가 옵션(주차 가능, 픽업 서비스, 조리 가능 등)을 기준으로 원하는 숙소를 검색하고 예약할 수 있는 서비스 입니다.",
    sections: [
      {
        title: "인증 요구 사항의 통합 관리",
        bullets: [
          `Axios 인스턴스를 활용하여 인증이 필요한 요청과 그렇지 않은 요청을 구분하고, Interceptors를
설정하여 인증이 필요한 경우에 인증되지 않은 사용자가 접근 시 자동으로 로그인 페이지로 이동하
는 모달창이 공통적으로 표시되도록 구현했습니다. 이는 페이지별로 모달창을 관리하며 발생했던 코
드의 복잡도를 줄이고, 사용자 경험을 간결하고 일관되게 유지하는 데 기여했습니다.`,
        ],
      },
      {
        title: "장바구니 인터페이스 개선",
        bullets: [
          `사용자가 장바구니에 다수의 상품을 담았을 때, 예상 구매 내역이 스크롤 시 화면에서 사라지는 문제
를 해결하기 위해 CSS의 position 속성에 sticky 값을 적용했습니다. 이로 인해, 사용자가 페이지를
아래로 스크롤해도 예상 구매 내역이 화면 상단에 고정되어 지속적으로 표시되도록 함으로써, 사용
자의 편의성을 개선하고 구매 결정 과정을 더욱 효율적으로 만들었습니다.`,
        ],
      },
      {
        title: "반응형 디자인 구현",
        bullets: [
          `Media Query를 활용한 반응형 디자인을 추가하여, 사용자가 사용 중인 장치의 화면 너비에 따라 UI
가 다르게 보이도록 개선했습니다. 이는 다양한 디바이스에서의 사용자 경험을 최적화하며, 모든 사
용자에게 일관된 서비스 접근성을 제공했습니다.`,
        ],
      },
      {
        title: "사용자 맞춤 서비스 제공을 위한 위치 정보 활용",
        bullets: [
          `Geolocation API를 사용하여 사용자의 위치 정보를 활용, 맞춤형 숙소 정보를 제공함으로써 서비스
의 편의성과 정확성을 높였습니다. 이 기술은 사용자에게 현재 위치에 기반한 개인화된 추천을 가능
하게 하여, 서비스 이용 시의 만족도가 향상 되도록 하였습니다.`,
        ],
      },
    ],
    reflection: `이번 프로젝트를 통해, 저는 처음으로 테스트 코드 작성에 도전했습니다. 이 과정에서, 필요하지 않거나 중요하지 않은 테스트 코드를 과도하게 작성하는 문제에 직면했습니다. 이는 제게 테스트 코드 작성의 필요성과 효율성에 대해 다시 한번 심도 깊게 고민할 기회를 제공했습니다. 앞으로 프론트엔드 개발 과정에서 정말 필요한 테스트 케이스를 식별하고, 효율적인 테스트 코드를 작성하는 능력을 개발하는 것이 목표입니다. 이 경험은 프론트엔드 개발에서 테스트 코드 작성의 중요성을 더욱 명확히 이해하고, 테스트가 필요한 상황을 보다 정확히 파악하는 데 도움이 될 것입니다.

또한, 이번 프로젝트는 백엔드 개발자와의 첫 협업 경험이기도 했습니다. 이 과정에서 프론트엔드와 백엔드 개발을 병렬적으로, 그리고 효율적으로 진행하기 위한 다양한 고민과 노력을 기울였습니다. 특히, 깔끔하고 정돈된 문서화의 중요성을 인식하고, 이를 위해 노션을 적극 활용했습니다. 또한, MSW(Mock Service Worker)를 통한 API 모킹을 활용하여 프론트엔드와 백엔드 간의 원활한 병렬 개발을 가능하게 했습니다. 이러한 접근은 프로젝트의 효율성을 높이고, 개발 과정 중 발생할 수 있는 잠재적 문제를 사전에 방지하는 데 큰 도움이 되었습니다.

이번 프로젝트를 통해 얻은 깊은 교훈과 경험은 제 개발 실력을 한 단계 더 성장시키는 계기가 되었습니다. 테스트 코드의 중요성에 대한 깊은 이해뿐만 아니라, 다양한 역할과의 협업 과정에서 효과적인 커뮤니케이션과 문서화의 중요성을 체감했습니다. 이러한 경험은 앞으로 제가 참여할 모든 프로젝트에서 더 나은 결과를 도출하는 데 중요한 역할을 할 것입니다.`,
  },
];

export type Skill = {
  title: string;
  description: string;
};

interface About {
  name: string;
  text: string;
  skills: Skill[];
}

export const about: About = {
  name: "이용훈",
  text: `안녕하세요, 사용자와의 상호작용을 통해 매력적인 웹 경험을 만들어가는 웹 개발자입니다. 저는 인터랙티브한 UI와 최적화된 성능을 중요하게 생각하며, 새로운 기술에 대한 꾸준한 관심을 통해 사용자에게 최상의 경험을 제공하고자 합니다.

기술을 통해 복잡한 문제를 해결하며, 사용자의 기억에 남는 순간을 만드는 것이 웹 개발자의 역할이라고 생각합니다. 끊임없는 호기심과 배움의 자세로 성장하고, 항상 사용자 중심의 서비스를 만드는 개발자가 되고자 합니다.`,
  skills: [
    {
      title: "JavaScript, TypeScript",
      description:
        "개인 및 팀 프로젝트를 통해 지속적으로 익혀왔으며, 실무에 필요한 활용 방식에 익숙.",
    },
    {
      title: "React, Next.js",
      description:
        "CSR에서 SSR로 전환 경험, SEO 최적화 및 퍼포먼스 개선 실적 보유.",
    },
    {
      title: "Tailwind CSS",
      description:
        "UI 컴포넌트 라이브러리 개발 및 배포 경험, 반응형 UI 등 사용자 경험 개선에 적극 활용.",
    },
    {
      title: "Zustand, React Query",
      description:
        "상황에 맞는 상태관리 방식 선택 가능, 비동기 처리와 글로벌 상태 관리에 능숙.",
    },
    {
      title: "Node.js",
      description: "Nest.js를 활용한 HTTP 서버 구축 경험 보유.",
    },
    {
      title: "Rust",
      description:
        "WebAssembly를 활용한 이미지 처리 및 HTTP 서버 구축 경험 보유.",
    },
    {
      title: "React Native Expo",
      description:
        "Webview 기반 앱 구축, 모바일-웹 연동(GPS 연동 및 postMessage 처리) 경험 보유.",
    },
  ],
};
